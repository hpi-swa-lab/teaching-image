'From Squeak6.0 of 10 September 2025 [latest update: #22155] on 7 October 2025 at 11:22:10 pm'!"Change Set:		FormatOnSavePreferenceDate:			7 October 2025Author:			Christoph ThiedeSee: https://lists.squeakfoundation.org/archives/list/squeak-dev@lists.squeakfoundation.org/thread/YRYUL6RFK25MDZFNFYDM3YZPYL3AIOZL/"!AppRegistry subclass: #SystemBrowser	instanceVariableNames: ''	classVariableNames: 'BrowseWithDragNDrop BrowseWithPrettyPrint AcceptWithPrettyPrint '	poolDictionaries: ''	category: 'Tools-Base'!!CodeHolder methodsFor: 'code pane' stamp: 'mad 12/4/2024 11:49'!basicCompile: aString in: aClassOrMetaClass classified: category notifying: requestor	| source |	source := SystemBrowser acceptWithPrettyPrint		ifTrue: [aClassOrMetaClass prettyPrinterClass			format: aString in: aClassOrMetaClass notifying: requestor]		ifFalse: [aString].	^ aClassOrMetaClass		compile: source		classified: category		notifying: requestor! !!CodeHolder methodsFor: 'code pane' stamp: 'mad 12/4/2024 11:50'!compileMessage: aString notifying: aController	"Compile the code that was accepted by the user, placing the compiled method into an appropriate message category.  Return true if the compilation succeeded, else false."		| selectedMessageName selector category selectedClassOrMetaClass |	selectedMessageName := self selectedMessageName.	selectedClassOrMetaClass := self selectedClassOrMetaClass.	contents := nil.	selector := (selectedClassOrMetaClass newParser parseSelector: aString).	(self metaClassIndicated		and: [(selectedClassOrMetaClass includesSelector: selector) not		and: [Metaclass isScarySelector: selector]])		ifTrue: ["A frist-time definition overlaps the protocol of Metaclasses"				(self confirm: ((selector , ' is used in the existing class system.Overriding it could cause serious problems.Is this really what you want to do?') asText makeBoldFrom: 1 to: selector size))				ifFalse: [^nil]].	category := self selectedMessageCategoryName.	selector := self		basicCompile: aString		in: selectedClassOrMetaClass		classified: category		notifying: aController.	selector == nil ifTrue: [^ nil].	contents := aString copy.	currentCompiledMethod := selectedClassOrMetaClass compiledMethodAt: selector.	^ true! !!Browser methodsFor: 'message functions' stamp: 'mad 12/4/2024 11:50'!defineMessageFrom: aString notifying: aController	"Compile the expressions in aString. Notify aController if a syntax error occurs. Install the compiled method in the selected class classified under  the currently selected message category name. Answer the selector obtained if compilation succeeds, nil otherwise."	| currentSelector selector category oldMessageList selectedClassOrMetaClass |	currentSelector := self selectedMessageName.	oldMessageList := self messageList.	selectedClassOrMetaClass := self selectedClassOrMetaClass.	contents := nil.	selector := (selectedClassOrMetaClass newParser parseSelector: aString).	(self metaClassIndicated		and: [(selectedClassOrMetaClass includesSelector: selector) not		and: [Metaclass isScarySelector: selector]])		ifTrue: ["A first-time definition overlaps the protocol of Metaclasses"				(self confirm: ((selector , ' is used in the existing class system.Overriding it could cause serious problems.Is this really what you want to do?') asText makeBoldFrom: 1 to: selector size))				ifFalse: [^nil]].	category := currentSelector		ifNil: [ self selectedMessageCategoryName ]		ifNotNil: [ (selectedClassOrMetaClass >> selectedMessageName) methodReference ifNotNil: [ : ref | ref category ]].	selector := self		basicCompile: aString		in: selectedClassOrMetaClass		classified: category		notifying: aController.	selector ifNil: [^ nil].	contents := aString copy.	self changed: #messageCategoryList. "Because the 'as yet unclassified' might just appear."	self changed: #messageList. "Because we have code-dependent list formatting by now such as #isDeprecated."		selector ~~ currentSelector		ifTrue: 			[category = ClassOrganizer nullCategory				ifTrue: [self changed: #classSelectionChanged.						self changed: #classList.						self messageCategoryListIndex: 1].			self setClassOrganizer.  "In case organization not cached"			(oldMessageList includes: selector)				ifFalse: [self changed: #messageList].			self messageListIndex: (self messageList indexOf: selector)].	^ selector! !!DependencyBrowser methodsFor: 'contents' stamp: 'mad 12/4/2024 11:50'!defineMessageFrom: aString notifying: aController	"Compile the expressions in aString. Notify aController if a syntax error occurs. Install the compiled method in the selected class classified under  the currently selected message category name. Answer the selector obtained if compilation succeeds, nil otherwise."	| selectedMessageName selector category oldMessageList |	selectedMessageName := self selectedMessageName.	oldMessageList := self messageList.	contents := nil.	selector := (self selectedClassOrMetaClass newParser parseSelector: aString).	selector := self		basicCompile: aString		in: self selectedClassOrMetaClass		classified: (category := self selectedMessageCategoryName)		notifying: aController.	selector == nil ifTrue: [^ false].	contents := aString copy.	^ true! !!SystemBrowser class methodsFor: 'preferences' stamp: 'mad 12/4/2024 11:49'!acceptWithPrettyPrint	<preference: 'Accept with pretty-print' category: 'browsing' description: 'If true, browsers will automatically pretty-print every method when you accept it.' type: #Boolean>	^ AcceptWithPrettyPrint ifNil: [false].! !!SystemBrowser class methodsFor: 'preferences' stamp: 'mad 12/4/2024 11:49'!acceptWithPrettyPrint: aBoolean	AcceptWithPrettyPrint := aBoolean.! !AppRegistry subclass: #SystemBrowser	instanceVariableNames: ''	classVariableNames: 'AcceptWithPrettyPrint BrowseWithDragNDrop BrowseWithPrettyPrint'	poolDictionaries: ''	category: 'Tools-Base'!